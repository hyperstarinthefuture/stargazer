// Code generated by MockGen. DO NOT EDIT.
// Source: ./crawler/github/client.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	gomock "github.com/golang/mock/gomock"
	github "github.com/richardlt/stargazer/crawler/github"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockClient) GetRepository(path string) (github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", path)
	ret0, _ := ret[0].(github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockClientMockRecorder) GetRepository(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockClient)(nil).GetRepository), path)
}

// GetRepositoryConributors mocks base method
func (m *MockClient) GetRepositoryConributors(path string) ([]github.Contributor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryConributors", path)
	ret0, _ := ret[0].([]github.Contributor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryConributors indicates an expected call of GetRepositoryConributors
func (mr *MockClientMockRecorder) GetRepositoryConributors(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryConributors", reflect.TypeOf((*MockClient)(nil).GetRepositoryConributors), path)
}

// GetRepositoryStargazer mocks base method
func (m *MockClient) GetRepositoryStargazer(path string) ([]github.Stargazer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryStargazer", path)
	ret0, _ := ret[0].([]github.Stargazer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryStargazer indicates an expected call of GetRepositoryStargazer
func (mr *MockClientMockRecorder) GetRepositoryStargazer(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryStargazer", reflect.TypeOf((*MockClient)(nil).GetRepositoryStargazer), path)
}

// GetRepositoryStargazerPage mocks base method
func (m *MockClient) GetRepositoryStargazerPage(path string, page int64) ([]github.Stargazer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryStargazerPage", path, page)
	ret0, _ := ret[0].([]github.Stargazer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositoryStargazerPage indicates an expected call of GetRepositoryStargazerPage
func (mr *MockClientMockRecorder) GetRepositoryStargazerPage(path, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryStargazerPage", reflect.TypeOf((*MockClient)(nil).GetRepositoryStargazerPage), path, page)
}

// GetUser mocks base method
func (m *MockClient) GetUser(login string) (github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockClientMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), login)
}

// GetUserOrganizations mocks base method
func (m *MockClient) GetUserOrganizations(login string) ([]github.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrganizations", login)
	ret0, _ := ret[0].([]github.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrganizations indicates an expected call of GetUserOrganizations
func (mr *MockClientMockRecorder) GetUserOrganizations(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrganizations", reflect.TypeOf((*MockClient)(nil).GetUserOrganizations), login)
}

// ResetRequestCount mocks base method
func (m *MockClient) ResetRequestCount() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetRequestCount")
}

// ResetRequestCount indicates an expected call of ResetRequestCount
func (mr *MockClientMockRecorder) ResetRequestCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetRequestCount", reflect.TypeOf((*MockClient)(nil).ResetRequestCount))
}

// GetRequestCount mocks base method
func (m *MockClient) GetRequestCount() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestCount")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetRequestCount indicates an expected call of GetRequestCount
func (mr *MockClientMockRecorder) GetRequestCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestCount", reflect.TypeOf((*MockClient)(nil).GetRequestCount))
}
